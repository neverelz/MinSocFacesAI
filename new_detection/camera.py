import cv2
import numpy as np
import os
from datetime import datetime
import threading
import time

class IVCamCapture:
    def __init__(self, screenshot_dir="screenshots"):
        """
        –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–º–µ—Ä–æ–π —á–µ—Ä–µ–∑ iVCam
        """
        self.cap = None
        self.screenshot_dir = screenshot_dir
        self.is_running = False
        self.frame = None
        self.lock = threading.Lock()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
        if not os.path.exists(self.screenshot_dir):
            os.makedirs(self.screenshot_dir)
    
    def find_ivcam_camera(self):
        """
        –ü–æ–∏—Å–∫ –∫–∞–º–µ—Ä—ã iVCam —Å—Ä–µ–¥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        """
        print("=" * 60)
        print("–ü–û–ò–°–ö –ö–ê–ú–ï–†–´ iVCam")
        print("=" * 60)
        
        available_cameras = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–º–µ—Ä—ã –æ—Ç 1 –¥–æ 15 (–Ω–∞—á–∏–Ω–∞–µ–º —Å –∫–∞–º–µ—Ä—ã 1, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º 0)
        for i in range(1, 16):
            print(f"\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–µ—Ä—ã {i}...")
            cap = cv2.VideoCapture(i)
            
            if cap.isOpened():
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–µ—Ä–µ
                width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
                height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
                fps = cap.get(cv2.CAP_PROP_FPS)
                backend = cap.getBackendName()
                
                print(f"  ‚úì –ö–∞–º–µ—Ä–∞ {i} –Ω–∞–π–¥–µ–Ω–∞:")
                print(f"    - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {width}x{height}")
                print(f"    - FPS: {fps}")
                print(f"    - Backend: {backend}")
                
                # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                ret, frame = cap.read()
                if ret and frame is not None:
                    print(f"  ‚úì –ö–∞–º–µ—Ä–∞ {i} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    available_cameras.append({
                        'index': i,
                        'width': width,
                        'height': height,
                        'fps': fps,
                        'backend': backend,
                        'working': True
                    })
                else:
                    print(f"  ‚úó –ö–∞–º–µ—Ä–∞ {i} –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä—ã")
                    available_cameras.append({
                        'index': i,
                        'width': width,
                        'height': height,
                        'fps': fps,
                        'backend': backend,
                        'working': False
                    })
            else:
                print(f"  ‚úó –ö–∞–º–µ—Ä–∞ {i} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
            cap.release()
        
        print("\n" + "=" * 60)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:")
        print("=" * 60)
        
        if not available_cameras:
            print("‚ùå –ù–∏–∫–∞–∫–∏—Ö –∫–∞–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("1. iVCam –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ")
            print("2. iVCam Client –Ω–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ")
            print("3. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –≤ –æ–¥–Ω–æ–π —Å–µ—Ç–∏")
            print("4. –ü—Ä–æ–±–ª–µ–º—ã —Å –¥—Ä–∞–π–≤–µ—Ä–∞–º–∏")
            return None
        
        print(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞–º–µ—Ä: {len(available_cameras)}")
        for cam in available_cameras:
            status = "‚úì –†–ê–ë–û–¢–ê–ï–¢" if cam['working'] else "‚úó –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
            print(f"  –ö–∞–º–µ—Ä–∞ {cam['index']}: {cam['width']}x{cam['height']} @ {cam['fps']} FPS - {status}")
        
        # –ò—â–µ–º —Ä–∞–±–æ—á—É—é –∫–∞–º–µ—Ä—É
        working_cameras = [cam for cam in available_cameras if cam['working']]
        
        if not working_cameras:
            print("\n‚ùå –ù–∏ –æ–¥–Ω–∞ –∫–∞–º–µ—Ä–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print("–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–º–µ—Ä—É 0 –∫–∞–∫ fallback...")
            fallback_camera = self._check_camera_0_fallback()
            if fallback_camera is not None:
                print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–º–µ—Ä–∞ 0 –∫–∞–∫ fallback")
                return fallback_camera
            return None
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è iVCam (–æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏)
        # iVCam —á–∞—Å—Ç–æ –∏–º–µ–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ 1280x720 –∏–ª–∏ 1920x1080
        ivcam_candidates = []
        for cam in working_cameras:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø–∏—á–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è iVCam
            if (cam['width'] == 1280 and cam['height'] == 720) or \
               (cam['width'] == 1920 and cam['height'] == 1080) or \
               (cam['width'] == 640 and cam['height'] == 480):
                ivcam_candidates.append(cam)
        
        if ivcam_candidates:
            selected = ivcam_candidates[0]
            print(f"\nüéØ –í—ã–±—Ä–∞–Ω–∞ –∫–∞–º–µ—Ä–∞ iVCam: {selected['index']}")
            return selected['index']
        else:
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ä–∞–±–æ—á—É—é
            selected = working_cameras[0]
            print(f"\n‚ö†Ô∏è  iVCam –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–æ—á–Ω–æ, –≤—ã–±—Ä–∞–Ω–∞ –∫–∞–º–µ—Ä–∞: {selected['index']}")
            print("–ï—Å–ª–∏ —ç—Ç–æ –Ω–µ iVCam, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:")
            print("1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å iVCam –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ")
            print("2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å iVCam Client –Ω–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–µ")
            print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏")
            return selected['index']
    
    def _check_camera_0_fallback(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–µ—Ä—ã 0 –∫–∞–∫ fallback (–µ—Å–ª–∏ –∫–∞–º–µ—Ä–∞ 1 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)
        """
        print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–º–µ—Ä—ã 0 –∫–∞–∫ fallback...")
        cap = cv2.VideoCapture(0)
        
        if cap.isOpened():
            width = cap.get(cv2.CAP_PROP_FRAME_WIDTH)
            height = cap.get(cv2.CAP_PROP_FRAME_HEIGHT)
            fps = cap.get(cv2.CAP_PROP_FPS)
            backend = cap.getBackendName()
            
            print(f"  ‚úì –ö–∞–º–µ—Ä–∞ 0 –Ω–∞–π–¥–µ–Ω–∞: {width}x{height} @ {fps} FPS ({backend})")
            
            ret, frame = cap.read()
            if ret and frame is not None:
                print(f"  ‚úì –ö–∞–º–µ—Ä–∞ 0 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                cap.release()
                return 0
            else:
                print(f"  ‚úó –ö–∞–º–µ—Ä–∞ 0 –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä—ã")
        
        cap.release()
        return None
    
    def start_camera(self, camera_index=None):
        """
        –ó–∞–ø—É—Å–∫ –∫–∞–º–µ—Ä—ã
        """
        if camera_index is None:
            camera_index = self.find_ivcam_camera()
        
        if camera_index is None:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–º–µ—Ä—É")
            return False
        
        self.cap = cv2.VideoCapture(camera_index)
        
        if not self.cap.isOpened():
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É {camera_index}")
            return False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä—ã
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
        self.cap.set(cv2.CAP_PROP_FPS, 30)
        
        print(f"–ö–∞–º–µ—Ä–∞ {camera_index} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞")
        print("–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:", self.cap.get(cv2.CAP_PROP_FRAME_WIDTH), "x", self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        print("FPS:", self.cap.get(cv2.CAP_PROP_FPS))
        
        self.is_running = True
        return True
    
    def get_frame(self):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
        """
        if not self.is_running or self.cap is None:
            return None
        
        ret, frame = self.cap.read()
        if ret:
            with self.lock:
                self.frame = frame.copy()
            return frame
        return None
    
    def take_screenshot(self):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
        """
        if self.frame is None:
            print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–∞–¥—Ä–∞ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
            return False
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"screenshot_{timestamp}.jpg"
        filepath = os.path.join(self.screenshot_dir, filename)
        
        with self.lock:
            if self.frame is not None:
                cv2.imwrite(filepath, self.frame)
                print(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
                return True
        
        return False
    
    def stop_camera(self):
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã
        """
        self.is_running = False
        if self.cap is not None:
            self.cap.release()
            self.cap = None
        print("–ö–∞–º–µ—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def __del__(self):
        """
        –î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–∞–º–µ—Ä—ã
        """
        self.stop_camera()

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    camera = IVCamCapture()
    
    if not camera.start_camera():
        return
    
    print("\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
    print("- –ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print("- –ù–∞–∂–º–∏—Ç–µ 's' –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
    print("- –ù–∞–∂–º–∏—Ç–µ 'SPACE' –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
    
    try:
        while camera.is_running:
            frame = camera.get_frame()
            if frame is not None:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –∫–∞–¥—Ä
                cv2.putText(frame, "iVCam Live Feed", (10, 30), 
                           cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                cv2.putText(frame, "Press 'q' to quit, 's' or SPACE for screenshot", 
                           (10, frame.shape[0] - 20), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
                
                cv2.imshow('iVCam Live Feed', frame)
                
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q'):
                    break
                elif key == ord('s') or key == ord(' '):
                    camera.take_screenshot()
    
    except KeyboardInterrupt:
        print("\n–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    finally:
        camera.stop_camera()
        cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
