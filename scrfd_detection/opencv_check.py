#!/usr/bin/env python3
"""
opencv_check.py ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º OpenCV –≤ Linux

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–≥–∞–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å OpenCV –∏ GUI –Ω–∞ Linux —Å–∏—Å—Ç–µ–º–∞—Ö.
"""

import os
import sys
import subprocess
from platform_utils import get_platform_info

def check_display():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–∏—Å–ø–ª–µ—è"""
    print("üñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–∏—Å–ø–ª–µ—è:")
    
    display_var = os.environ.get('DISPLAY')
    if display_var:
        print(f"‚úÖ DISPLAY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {display_var}")
    else:
        print("‚ùå DISPLAY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: export DISPLAY=:0.0")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å X11
    try:
        result = subprocess.run(['xset', 'q'], capture_output=True, text=True, timeout=5)
        if result.returncode == 0:
            print("‚úÖ X11 —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ö†Ô∏è X11 —Å–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except FileNotFoundError:
        print("‚ö†Ô∏è xset –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–º–æ–∂–Ω–æ X11 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except subprocess.TimeoutExpired:
        print("‚ö†Ô∏è –¢–∞–π–º-–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ X11")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ X11: {e}")
    
    return True

def check_opencv_gui():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ GUI –ø–æ–¥–¥–µ—Ä–∂–∫–∏ OpenCV"""
    print("\nüì± –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenCV GUI:")
    
    try:
        import cv2
        print(f"‚úÖ OpenCV –≤–µ—Ä—Å–∏—è: {cv2.__version__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ backend'—ã
        backends = []
        for attr in dir(cv2):
            if attr.startswith('CAP_'):
                backends.append((attr, getattr(cv2, attr)))
        
        print("üé• –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ backend'—ã:")
        for name, value in sorted(backends, key=lambda x: x[1]):
            print(f"  {name}: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º GUI –ø–æ–¥–¥–µ—Ä–∂–∫—É
        try:
            test_img = cv2.imread('/dev/null')  # –≠—Ç–æ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç None, –Ω–æ –Ω–µ –æ—à–∏–±–∫–∞
            if test_img is None:
                print("‚úÖ OpenCV GUI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
            else:
                print("‚úÖ OpenCV GUI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å GUI —Ñ—É–Ω–∫—Ü–∏—è–º–∏: {e}")
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
        try:
            cv2.namedWindow('test', cv2.WINDOW_NORMAL)
            cv2.waitKey(1)
            cv2.destroyWindow('test')
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç")
        except Exception as e:
            print(f"‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –æ–∫–æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
            return False
            
    except ImportError:
        print("‚ùå OpenCV –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    return True

def check_linux_packages():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö Linux –ø–∞–∫–µ—Ç–æ–≤"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤:")
    
    packages_to_check = [
        'libgl1-mesa-glx',
        'libglib2.0-0', 
        'libgtk-3-0',
        'python3-opencv',
        'x11-apps'
    ]
    
    for package in packages_to_check:
        try:
            result = subprocess.run(['dpkg', '-l', package], 
                                 capture_exitcode=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            else:
                print(f"‚ö†Ô∏è {package} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except FileNotFoundError:
            print(f"‚ö†Ô∏è dpkg –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ Ubuntu/Debian)")
            break
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {package}: {e}")

def suggest_solutions():
    """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º"""
    print("\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    
    platform_info = get_platform_info()
    
    if platform_info['is_linux']:
        print("üêß Linux –æ–±–Ω–∞—Ä—É–∂–µ–Ω:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã:")
        print("   sudo apt update")
        print("   sudo apt install python3-opencv libgl1-mesa-glx libglib2.0-0 libgtk-3-0 x11-apps")
        print("\n2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DISPLAY:")
        print("   echo $DISPLAY")
        print("   export DISPLAY=:0.0  # –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("\n3. –î–ª—è headless —Ä–µ–∂–∏–º–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   ssh -X username@hostname python main.py  # —Å X11 forwarding")
        print("\n4. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Docker —Å X11 forwarding")
        print("   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å–∫ –±–µ–∑ GUI (headless mode)")
        
def main():
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º OpenCV –Ω–∞ Linux\\n")
    
    platform_info = get_platform_info()
    if not platform_info['is_linux']:
        print("‚ÑπÔ∏è –≠—Ç–æ—Ç —Å–∫ ript –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è Linux —Å–∏—Å—Ç–µ–º")
        if platform_info['is_windows']:
            print("ü™ü –î–ª—è Windows –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—â–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é")
        elif platform_info['is_macos']:
            print("üçé –î–ª—è macOS —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω XQuartz")
        return
    
    success = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    success &= check_display()
    success &= check_opencv_gui()
    check_linux_packages()
    
    suggest_solutions()
    
    if success:
        print("\nüéâ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üí° –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å X11 —Å–µ—Ä–≤–µ—Ä")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å GUI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    main()
