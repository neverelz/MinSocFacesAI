#!/usr/bin/env python3
"""
gui_test.py ‚Äî —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GUI –ø—Ä–æ–±–ª–µ–º –Ω–∞ Linux

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ OpenCV GUI, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.
"""

import cv2
import numpy as np
import time
import os
import sys
from platform_utils import get_platform_info

def test_basic_window_creation():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞"""
    print("ü™ü –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–∫–Ω–∞:")
    
    try:
        # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–∫–Ω–∞
        cv2.namedWindow('test_window', cv2.WINDOW_NORMAL)
        print("‚úÖ –û–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = np.zeros((300, 400, 3), dtype=np.uint8)
        cv2.putText(img, "Test Image", (50, 150), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 255, 255), 3)
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –¢–µ—Å—Ç 3: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cv2.imshow('test_window', img)
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ")
        
        # –¢–µ—Å—Ç 4: –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–Ω–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É)...")
        key = cv2.waitKey(1)
        time.sleep(0.1)
        print("‚úÖ waitKey —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 5: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        cv2.resizeWindow('test_window', 600, 400)
        cv2.waitKey(1)
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 6: Mouse callback
        mouse_callback_called = False
        def test_mouse_callback(event, x, y, flags, param):
            nonlocal mouse_callback_called
            if event == cv2.EVENT_LBUTTONDOWN:
                mouse_callback_called = True
                print(f"‚úÖ Mouse click detected at ({x}, {y})")
        
        try:
            cv2.setMouseCallback('test_window', test_mouse_callback)
            print("‚úÖ Mouse callback —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —â–µ–ª—á–æ–∫
            print("‚è≥ –û–©–ï–õ–ö–ù–ò–¢–ï –ü–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)...")
            for i in range(50):  # 5 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
                cv2.imshow('test_window', img)
                key = cv2.waitKey(100) & 0xFF
                if key == ord('q') or mouse_callback_called:
                    break
                    
            if mouse_callback_called:
                print("‚úÖ Mouse callback —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            else:
                print("‚ö†Ô∏è Mouse callback –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                
        except Exception as e:
            print(f"‚ùå Mouse callback –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {e}")
        
        cv2.destroyWindow('test_window')
        print("‚úÖ –û–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞: {e}")
        return False

def test_multiple_windows():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–∫–æ–Ω"""
    print("\nü™üü™ü –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω:")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–∫–æ–Ω
        window_names = ['window1', 'window2', 'window3']
        for i, name in enumerate(window_names):
            cv2.namedWindow(name, cv2.WINDOW_NORMAL)
            img = np.full((200, 300, 3), i * 80, dtype=np.uint8)
            cv2.putText(img, f"Window {i+1}", (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
            cv2.imshow(name, img)
            
        cv2.waitKey(1)
        print("‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ
        for name in window_names:
            cv2.destroyWindow(name)
        print("‚úÖ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        return False

def test_resize_window():
    """–¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–∞"""
    print("\nüìè –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞:")
    
    try:
        cv2.namedWindow('resize_test', cv2.WINDOW_NORMAL)
        
        sizes = [(400, 300), (800, 600), (1200, 900), (400, 300)]
        
        for w, h in sizes:
            cv2.resizeWindow('resize_test', w, h)
            cv2.waitKey(50)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
            
        cv2.destroyWindow('resize_test')
        print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        return False

def test_image_operations():
    """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º"""
    print("\nüñºÔ∏è –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–∂–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = np.zeros((480, 640, 3), dtype=np.uint8)
        
        # –°–ª–æ–∂–Ω—ã–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        cv2.circle(img, (320, 240), 100, (0, 255, 0), 3)
        cv2.rectangle(img, (200, 150), (450, 330), (255, 0, 0), 2)
        cv2.line(img, (100, 100), (500, 400), (0, 0, 255), 2)
        
        for i in range(10):
            cv2.putText(img, f"Line {i}", (10, 30 + i*20), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)
        
        cv2.namedWindow('image_test', cv2.WINDOW_NORMAL)
        cv2.imshow('image_test', img)
        cv2.waitKey(1)
        
        print("‚úÖ –°–ª–æ–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç–∞—é—Ç")
        
        cv2.destroyWindow('image_test')
        return True
        
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –Ω–µ –ø—Ä–æ—à–µ–ª: {e}")
        return False

def test_linux_specific():
    """–°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è Linux —Ç–µ—Å—Ç—ã"""
    print("\nüêß Linux-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã:")
    
    platform_info = get_platform_info()
    
    if not platform_info['is_linux']:
        print("‚ÑπÔ∏è –≠—Ç–∏ —Ç–µ—Å—Ç—ã –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω—ã –¥–ª—è Linux")
        return True
    
    print(f"Platform: {platform_info}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    display = os.environ.get('DISPLAY')
    print(f"DISPLAY: {display}")
    
    xdg_session = os.environ.get('XDG_SESSION_TYPE')
    print(f"XDG_SESSION_TYPE: {xdg_session}")
    
    wayland_display = os.environ.get('WAYLAND_DISPLAY')
    print(f"WAYLAND_DISPLAY: {wayland_display}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if not display:
        print("‚ùå DISPLAY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: export DISPLAY=:0.0")
        return False
    
    if xdg_session == 'wayland':
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω Wayland. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ OpenCV –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å.")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑ X11 —Å–µ—Å—Å–∏–∏")
    
    return True

def interactive_test():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç"""
    print("\nüëÜ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç:")
    print("–ë—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    print("–ù–∞–∂–º–∏—Ç–µ –ª—é–±—ã–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    print("–ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
    
    cv2.namedWindow('Interactive Test', cv2.WINDOW_NORMAL)
    
    frame_count = 0
    start_time = time.time()
    
    try:
        while True:
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img = np.zeros((400, 600, 3), dtype=np.uint8)
            
            # –ê–Ω–∏–º–∞—Ü–∏—è
            t = time.time() - start_time
            center_x = int(300 + 100 + 50 * np.sin(t * 2))
            center_y = int(200 + 50 * np.cos(t * 2))
            
            cv2.circle(img, (center_x, center_y), 30, (0, 255, 0), -1)
            cv2.putText(img, f"Frame: {frame_count}", (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
            
            fps = frame_count / (time.time() - start_time + 0.001)
            cv2.putText(img, f"FPS: {fps:.1f}", (10, 70), 
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
            
            cv2.putText(img, "Press 'q' to quit", (10, 370), 
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
            
            cv2.imshow('Interactive Test', img)
            frame_count += 1
            
            key = cv2.waitKey(30) & 0xFF
            if key == ord('q'):
                print("‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            elif key != 255:  # –õ—é–±–∞—è –∫–ª–∞–≤–∏—à–∞ –Ω–∞–∂–∞—Ç–∞
                print(f"–ù–∞–∂–∞—Ç–∞ –∫–ª–∞–≤–∏—à–∞: {chr(key) if key else key}")
    
    finally:
        cv2.destroyWindow('Interactive Test')

def main():
    print("üî¨ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ GUI –Ω–∞ Linux")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    tests = [
        ("–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞", test_basic_window_creation),
        ("–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞", test_multiple_windows),
        ("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞", test_resize_window),
        ("–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º", test_image_operations),
        ("Linux-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ", test_linux_specific),
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            result = test_func()
            results.append((test_name, result))
            if result:
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
            results.append((test_name, False))
    
    # –°–≤–æ–¥–∫–∞
    print("\n" + "="*60)
    print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"  {test_name}: {status}")
    
    print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total}")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! GUI –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç
        try:
            interactive_test()
        except KeyboardInterrupt:
            print("\n–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ç–µ—Å—Ç–µ: {e}")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å GUI.")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é DISPLAY: export DISPLAY=:0.0")
        print("‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è Linux")
        print("‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Å–ø–ª–µ—é")
        print("‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑ X11 —Å–µ—Å—Å–∏–∏ (–Ω–µ Wayland)")
    
    cv2.destroyAllWindows()
    return 0 if passed == total else 1

if __name__ == "__main__":
    sys.exit(main())
