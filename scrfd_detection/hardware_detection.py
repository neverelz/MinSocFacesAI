# hardware_detection.py ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è

import psutil
import torch

class HardwareLevel:
    WEAK = "weak"
    MEDIUM = "medium"
    STRONG = "strong"

def get_cpu_info():
    cores = psutil.cpu_count(logical=False)
    logical_cores = psutil.cpu_count(logical=True)
    freq = psutil.cpu_freq()
    max_freq = freq.max if freq else 2000
    return {
        'physical_cores': cores,
        'logical_cores': logical_cores,
        'max_freq_mhz': max_freq
    }

def get_memory_info():
    mem = psutil.virtual_memory()
    total_gb = mem.total / (1024**3)
    return total_gb

def is_gpu_available():
    if torch.cuda.is_available():
        return True, f"CUDA: {torch.cuda.get_device_name(0)}"
    elif hasattr(torch.backends, 'mps') and torch.backends.mps.is_available():
        return True, "Apple MPS"
    else:
        return False, "No GPU"

def estimate_hardware_level():
    cpu = get_cpu_info()
    ram_gb = get_memory_info()
    gpu_available, gpu_name = is_gpu_available()

    score = 0

    if cpu['physical_cores'] >= 8 and cpu['max_freq_mhz'] >= 3500:
        score += 3
    elif cpu['physical_cores'] >= 4 and cpu['max_freq_mhz'] >= 3000:
        score += 2
    else:
        score += 1

    if ram_gb >= 16:
        score += 2
    elif ram_gb >= 8:
        score += 1

    if gpu_available:
        score += 3

    if score >= 7:
        level = HardwareLevel.STRONG
    elif score >= 4:
        level = HardwareLevel.MEDIUM
    else:
        level = HardwareLevel.WEAK

    details = {
        'cpu_cores_physical': cpu['physical_cores'],
        'cpu_max_freq_ghz': round(cpu['max_freq_mhz'] / 1000, 1),
        'ram_gb': round(ram_gb, 1),
        'gpu_available': gpu_available,
        'gpu_name': gpu_name,
        'score': score
    }

    return level, score, details

def get_optimal_settings(hardware_level):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –∂–µ–ª–µ–∑–∞. –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ª–∏—Ü –í–°–ï–ì–î–ê –≤–∫–ª—é—á–µ–Ω–æ."""
    if hardware_level == HardwareLevel.STRONG:
        return {
            'process_interval_sec': 0.1,
            'camera_width': 1280,
            'camera_height': 720,
            'camera_fps': 30
        }
    elif hardware_level == HardwareLevel.MEDIUM:
        return {
            'process_interval_sec': 1.0,
            'camera_width': 960,
            'camera_height': 540,
            'camera_fps': 15
        }
    else:  # WEAK
        return {
            'process_interval_sec': 4.0,
            'camera_width': 640,
            'camera_height': 480,
            'camera_fps': 10
        }

def select_hardware_level_interactive(estimated_level):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤—Ä—É—á–Ω—É—é."""
    print("\n‚öôÔ∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω —É—Ä–æ–≤–µ–Ω—å –∂–µ–ª–µ–∑–∞:", estimated_level.upper())
    print("   –í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –µ–≥–æ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≤—Ä—É—á–Ω—É—é.\n")

    options = {
        "1": HardwareLevel.WEAK,
        "2": HardwareLevel.MEDIUM,
        "3": HardwareLevel.STRONG
    }

    print("   1 ‚Äî –°–ª–∞–±–æ–µ –∂–µ–ª–µ–∑–æ (—ç–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤)")
    print("   2 ‚Äî –°—Ä–µ–¥–Ω–µ–µ –∂–µ–ª–µ–∑–æ (–±–∞–ª–∞–Ω—Å)")
    print("   3 ‚Äî –°–∏–ª—å–Ω–æ–µ –∂–µ–ª–µ–∑–æ (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)")
    print("   Enter ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å\n")

    while True:
        choice = input("üëâ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å (1/2/3) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter: ").strip()
        if choice == "":
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: {estimated_level.upper()}")
            return estimated_level
        elif choice in options:
            selected = options[choice]
            print(f"‚úÖ –í—ã–±—Ä–∞–Ω —É—Ä–æ–≤–µ–Ω—å –≤—Ä—É—á–Ω—É—é: {selected.upper()}")
            return selected
        else:
            print("‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

if __name__ == "__main__":
    level, score, details = estimate_hardware_level()
    print("üìä –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:")
    print(f"   –£—Ä–æ–≤–µ–Ω—å: {level.upper()}")
    print(f"   –°—á—ë—Ç: {score}/8")
    print(f"   CPU: {details['cpu_cores_physical']} —è–¥–µ—Ä, {details['cpu_max_freq_ghz']} GHz")
    print(f"   RAM: {details['ram_gb']} GB")
    print(f"   GPU: {'‚úÖ ' + details['gpu_name'] if details['gpu_available'] else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    print()

    settings = get_optimal_settings(level)
    print("‚öôÔ∏è  –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é):")
    for key, value in settings.items():
        print(f"   {key}: {value}")