#!/usr/bin/env python3
"""
system_check.py ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã

–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""

import sys
import os
from platform_utils import get_platform_info, get_font_candidates, is_gpu_supported, get_optimal_threading_settings

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    dependencies = [
        ('cv2', 'OpenCV'),
        ('numpy', 'NumPy'),
        ('PIL', 'Pillow'),
        ('psutil', 'PSUtil'),
        ('tensorflow', 'TensorFlow'),
        ('sklearn', 'Scikit Learn'),
        ('insightface', 'InsightFace')
    ]
    
    missing = []
    for module, name in dependencies:
        try:
            __import__(module)
            print(f"‚úÖ {name}")
        except ImportError:
            print(f"‚ùå {name} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing.append(name)
    
    return len(missing) == 0

def check_model_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏"""
    model_path = 'checkpoints/GN_W1.3_S1_ArcFace_epoch46.h5'
    if os.path.exists(model_path):
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        return True
    else:
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
        alternatives = [
            os.path.join('scrfd_detection', 'checkpoints', 'GN_W1.3_S1_ArcFace_epoch46.h5'),
            '../checkpoints/GN_W1.3_S1_ArcFace_epoch46.h5',
            './checkpoints/GN_W1.3_S1_ArcFace_epoch46.h5'
        ]
        
        for alt in alternatives:
            if os.path.exists(alt):
                print(f"‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞: {alt}")
                return True
        
        return False

def check_camera_access():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ"""
    try:
        import cv2
        cap = cv2.VideoCapture(0)
        if cap.isOpened():
            ret, frame = cap.read()
            if ret and frame is not None:
                print("‚úÖ –ö–∞–º–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
                cap.release()
                return True
            else:
                print("‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∫–∞–¥—Ä—ã")
        else:
            print("‚ùå –ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        cap.release()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–º–µ—Ä—ã: {e}")
    
    return False

def check_fonts():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤"""
    candidates = get_font_candidates()
    available_fonts = []
    
    for font_path in candidates:
        try:
            from PIL import ImageFont
            if font_path is None:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                font = ImageFont.load_default()
                available_fonts.append("Default system font")
                break
            else:
                font = ImageFont.truetype(font_path, 10)
                available_fonts.append(os.path.basename(font_path))
        except:
            continue
    
    if available_fonts:
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã: {', '.join(available_fonts[:3])}")
        return True
    else:
        print("‚ùå –®—Ä–∏—Ñ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–∏—Å—Ç–µ–º–Ω—ã–π —à—Ä–∏—Ñ—Ç")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

def check_gpu():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ GPU"""
    gpu_available, gpu_info = is_gpu_supported()
    if gpu_available:
        print(f"‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {gpu_info}")
        return True
    else:
        print(f"‚ö†Ô∏è GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {gpu_info} (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU)")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

def check_threading():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ—Ç–æ–∫–æ–≤"""
    threading_settings = get_optimal_threading_settings()
    print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ç–æ–∫–æ–≤: {threading_settings}")
    return True

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...\\n")
    
    platform_info = get_platform_info()
    print(f"üìç –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform_info['platform']}\\n")
    
    checks = [
        check_python_version,
        check_dependencies,
        check_model_files,
        check_camera_access,
        check_fonts,
        check_gpu,
        check_threading
    ]
    
    results = []
    for check in checks:
        results.append(check())
        print()
    
    critical_checks = results[:3]  # Python, –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –º–æ–¥–µ–ª—å
    
    if all(critical_checks):
        print("üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        
        if not all(results):
            print("\\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å:")
            if not results[3]:  # –ö–∞–º–µ—Ä–∞
                print("‚Ä¢ –ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            if not results[5]:  # GPU
                print("‚Ä¢ GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω CPU —Ä–µ–∂–∏–º")
    else:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
